#!/usr/bin/env ruby

# Exit cleanly from an early interrupt
Signal.trap("INT") { exit 1 }

require 'optparse'
require 'logger'
require 'benchmark'
require 'csv'
require 'dotenv'
Dotenv.load

require_relative 'entities/submission'
require_relative 'entities/ontology'
require_relative 'entities/agent'

LOV_ENDPOINT = ENV['LOV_ENDPOINT']
LOVPORTAL_ENDPOINT = ENV['LOVPORTAL_ENDPOINT']

def parse_options
  options = {}
  OptionParser.new do |opts|
    opts.banner = "Usage: lov_migrator [options]"
    opts.on('--update', 'Update metadata') { options[:update] = true }
    opts.on('--agents', 'Start agents migration') { options[:agents] = true }
    opts.on('--vocabs') { options[:vocabs] = true }
    opts.on('--submissions ONTOLOGIES') do |ontologies|
      options[:submissions] = ontologies.split(",")
    end
    opts.on('--target-portal PORTAL') do |targetPortal|
      options[:targetPortal] = targetPortal
    end
    opts.on('-h', '--help', 'Display this screen') do
      puts opts
      exit
    end
  end.parse!

  raise OptionParser::MissingArgument, "You must specify at least one argument." if options.empty?
  options
end

def logger(log_file, message, level = "INFO")
  timestamp = Time.now.strftime("%Y-%m-%d %H:%M:%S")
  full_message = "[#{timestamp}] [#{level}] #{message}"
  log_file.puts(full_message)
  puts full_message
end

def main(options)
  logger = Logger.new(STDOUT)  
  if options[:agents]
    agents = []
    logger("Fetching all Agents") do
      agents = Agent.fetch_all
      Agent.fetch_and_save_portal_agents
    end
    
    agents.each do |agent|
      logger("Uploading <#{agent.name}> to LovPortal") do   
        if agent.exists?
          puts "Agent already exists"
        else
          agent.upload  
        end  
      end
    end
  end

  if options[:vocabs]
    File.open("vovabularies_status_logs.log", "a") do |log_file|
      if options[:targetPortal]
        Ontology.set_target_portal(options[:targetPortal])
      end
      ontologies = []
      logger(log_file, "Fetching all Ontologies") 
      ontologies = Ontology.fetch_all

      ontologies.each do |ontology|
        logger(log_file, "Uploading #{ontology.name} to LovPortal")    
        response = ontology.upload
        if response.code == "201"
          logger(log_file, "#{ontology.name} Uploaded successfully #{response.code}")
        elsif response.code == "409"
          logger(log_file, "Vocabulary exists already #{response.code}")
        else
          logger(log_file, "Upload Response Code: #{response.code}", "ERROR")
        end
      end
    end
  end
  
  if options[:submissions]
    if options[:targetPortal]
      Submission.set_target_portal(options[:targetPortal])
    end
    vocabsAcronyms = nil
    if options[:submissions][0] != "all"
      vocabsAcronyms = options[:submissions]
    end
    submissions = Submission.fetch_all(vocabsAcronyms)

    # this code is used to pull the latest submissions that has a file
    unique_submissions = submissions.group_by { |sub| sub.acronym }.transform_values do |records|
      # Filter records with URI first
      uri_records = records.select { |record| record.pullLocationn&.start_with?("http") }
      
      # If there are URI records, return all of them
      if uri_records.any?
        uri_records
      else
        # Fallback to the first record if no URI records exist
        [records.first]
      end
    end.values.flatten
  
    File.open("submission_status_logs.log", "a") do |log_file|  # Open the log file in append mode
      # Group submissions by their acronyms
      grouped_submissions = unique_submissions.group_by(&:acronym)
    
      grouped_submissions.each do |acronym, submissions|
        if options[:update]
          # Fetch the latest version for the current acronym
          latest_version = submissions.last.fetch_latest_submission_version
    
          # Find the index of the submission that matches the latest version
          latest_submission_index = submissions.find_index { |submission| submission.version == latest_version }
          if latest_submission_index == submissions.size - 1
            submission = submissions.last
            submission.pull_submission
            response = submission.update  # Call update for submissions after the latest version
    
            logger(log_file, "Updated the Metadata of version (#{submission.version}) of the Vocabulary '#{acronym.upcase}'.")
          else
            # Process all submissions after the latest version
            submissions_to_process = submissions[(latest_submission_index + 1)..-1]
          
            if submissions_to_process.any?
              # Ask for user confirmation
              puts "Found #{submissions_to_process.size} new submission(s) for '#{acronym.upcase}' after version #{latest_version}."
              print "Do you want to upload these submissions? (yes/no): "
              user_input = gets.chomp.downcase
          
              if user_input == "yes" || user_input == "y"
                submissions_to_process.each do |submission|
                  begin
                    submission.pull_submission
                    response = submission.upload  # Call upload for submissions after the latest version
                    logger(log_file, "Uploaded new version (#{submission.version}) of the Vocabulary '#{acronym.upcase}'.")
                  rescue StandardError => e
                    logger(log_file, "Error updating version (#{submission.version}) of the Vocabulary '#{acronym.upcase}': #{e.message}", "ERROR")
                  end
                end
              else
                logger(log_file, "Skipped processing new submissions for '#{acronym.upcase}' after version #{latest_version}.")
              end
            else
              logger(log_file, "No new submissions found for '#{acronym.upcase}' after version #{latest_version}.")
            end
          end
        else
          # Process all submissions if not in update mode
          submissions.each do |submission|
            begin
              submission.pull_submission
              response = submission.upload  # Call upload for normal submissions
              logger(log_file, "Uploaded version (#{submission.version}) of the Vocabulary '#{acronym.upcase}'.")
            rescue StandardError => e
              logger(log_file, "Error uploading version (#{submission.version}) of the Vocabulary '#{acronym.upcase}': #{e.message}", "ERROR")
            end
          end
        end
      end
    end
    
    
    
  end
  

end

# Entry point
options = parse_options
main(options)
