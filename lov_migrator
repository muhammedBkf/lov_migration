#!/usr/bin/env ruby

# Exit cleanly from an early interrupt
Signal.trap("INT") { exit 1 }

require 'optparse'
require 'logger'
require 'benchmark'
require 'csv'

require_relative 'entities/submission'
require_relative 'entities/ontology'
require_relative 'entities/agent'

LOV_ENDPOINT = "http://localhost:3030/lov"
LOVPORTAL_ENDPOINT = "http://0.0.0.0:9393"

def parse_options
  options = {}
  OptionParser.new do |opts|
    opts.banner = "Usage: lov_migrator [options]"
    opts.on('--agents', 'Start agents migration') { options[:agents] = true }
    opts.on('--vocabs') { options[:vocabs] = true }
    opts.on('--submissions ONTOLOGIES') do |ontologies|
      options[:submissions] = ontologies.split(",")
    end
    opts.on('--target-portal PORTAL') do |targetPortal|
      options[:targetPortal] = targetPortal
    end
    opts.on('-h', '--help', 'Display this screen') do
      puts opts
      exit
    end
  end.parse!

  raise OptionParser::MissingArgument, "You must specify at least one argument." if options.empty?
  options
end

def logger(text, &block)
  puts ">> #{text} starting..."
time = Benchmark.realtime do
  block.call
end
puts "#{text} finished in #{time} seconds"
end

def main(options)
  logger = Logger.new(STDOUT)  
  if options[:agents]
    agents = []
    logger("Fetching all Agents") do
      agents = Agent.fetch_all
      Agent.fetch_and_save_portal_agents
    end
    
    agents.each do |agent|
      logger("Uploading <#{agent.name}> to LovPortal") do   
        if agent.exists?
          puts "Agent already exists"
        else
          agent.upload  
        end  
      end
    end
  end

  if options[:vocabs]
    if options[:targetPortal]
      Ontology.set_target_portal(options[:targetPortal])
    end
    ontologies = []
        logger("Fetching all Ontologies") do
      ontologies = Ontology.fetch_all
    end
    
    ontologies.each do |ontology|
      logger("Uploading #{ontology.name} to LovPortal") do   
        response = ontology.upload
        p response.code, response.body
      end  
    end
  end

  if options[:submissions]
    if options[:targetPortal]
      Submission.set_target_portal(options[:targetPortal])
    end
    vocabsAcronyms = nil
    if options[:submissions][0] != "all"
      vocabsAcronyms = options[:submissions]
    end
    submissions = Submission.fetch_all(vocabsAcronyms)
    p submissions

    # this code is used to pull the latest submissions that has a file
    unique_submissions = submissions.group_by { |sub| sub.acronym }.transform_values do |records|
      # Filter records with URI first
      uri_records = records.select { |record| record.pullLocationn&.start_with?("http") }
      
      # If there are URI records, return all of them
      if uri_records.any?
        uri_records
      else
        # Fallback to the first record if no URI records exist
        [records.first]
      end
    end.values.flatten
  
    File.open("submission_status_logs.txt", "a") do |log_file|  # Open the log file in append mode
    unique_submissions.each do |submission|
      begin
        submission.pull_submission
          response = submission.upload  # Capture the response here
    
          # Log only the response code and body
          log_file.puts("Response Code: #{response.code}")
          log_file.puts("Response Body: #{response.body}")
          log_file.puts("---")  # Separator for readability
    
        rescue StandardError => e
          # Log only the error message if an exception occurs
          log_file.puts("Error: #{e.message}")
          log_file.puts("---")  # Separator for readability
        end
        end
      end
  end

end

# Entry point
options = parse_options
main(options)
