#!/usr/bin/env ruby

# Exit cleanly from an early interrupt
Signal.trap("INT") { exit 1 }

require 'optparse'
require 'logger'
require 'benchmark'

require_relative 'entities/ontology'
require_relative 'entities/agent'

LOV_ENDPOINT = "http://localhost:3030/lov"
LOVPORTAL_ENDPOINT = "http://0.0.0.0:9393"

def parse_options
  options = {}
  OptionParser.new do |opts|
    opts.banner = "Usage: lov_migrator [options]"
    opts.on('--agents', 'Start agents migration') { options[:agents] = true }
    opts.on('--vocabs') { options[:vocabs] = true }
    opts.on('--submissions ONTOLOGIES') do |ontologies|
      options[:submissions] = ontologies.split(",")
    end
    opts.on('--target-portal PORTAL') do |targetPortal|
      options[:targetPortal] = targetPortal
    end
    opts.on('-h', '--help', 'Display this screen') do
      puts opts
      exit
    end
  end.parse!

  raise OptionParser::MissingArgument, "You must specify at least one argument." if options.empty?
  options
end

def logger(text, &block)
  puts ">> #{text} starting..."
time = Benchmark.realtime do
  block.call
end
puts "#{text} finished in #{time} seconds"
end

def main(options)
  logger = Logger.new(STDOUT)  
  if options[:agents]
    agents = []
    logger("Fetching all Agents") do
      agents = Agent.fetch_all
      Agent.fetch_and_save_agent_names

    end
    
    agents.each do |agent|
      logger("Uploading <#{agent.name}> to LovPortal") do   
        if agent.exists?
          puts "Agent already exists"
        else
          agent.upload  
        end  
      end
    end
  end
end

# Entry point
options = parse_options
main(options)
